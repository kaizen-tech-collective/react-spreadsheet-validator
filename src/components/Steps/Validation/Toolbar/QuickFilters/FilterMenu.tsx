import * as React from 'react';

import Box from '@mui/material/Box';
import Chip from '@mui/material/Chip';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import Tooltip from '@mui/material/Tooltip';

import FilterListIcon from '@mui/icons-material/FilterList';

import { ToolbarButton } from '@mui/x-data-grid';

// Generated by Copilot

export type ValidationFilterOptions = 'all' | 'errors' | 'warnings';

interface FilterMenuProps {
  activeFilter: ValidationFilterOptions;
  onFilterChange: (filter: ValidationFilterOptions) => void;
}

const getFilterLabel = (filter: ValidationFilterOptions) => {
  switch (filter) {
    case 'all':
      return 'All Data';
    case 'errors':
      return 'Errors Only';
    case 'warnings':
      return 'Warnings Only';
    default:
      return 'All Data';
  }
};

// Generated by Copilot
const getFilterColor = (filter: ValidationFilterOptions) => {
  switch (filter) {
    case 'errors':
      return 'error';
    case 'warnings':
      return 'warning';
    default:
      return 'default';
  }
};

/**
 * Filter menu component for the validation step DataGrid
 * Provides filtering options for all data, errors only, or warnings only
 */
const FilterMenu: React.FC<FilterMenuProps> = ({ activeFilter, onFilterChange }) => {
  const filterMenuTriggerRef = React.useRef<HTMLButtonElement>(null);
  const [filterMenuOpen, setFilterMenuOpen] = React.useState(false);

  const handleFilterSelect = (filter: ValidationFilterOptions) => {
    onFilterChange(filter);
    setFilterMenuOpen(false);
  };

  return (
    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
      {activeFilter !== 'all' ? (
        <Chip label={getFilterLabel(activeFilter)} color={getFilterColor(activeFilter)} size="small" />
      ) : null}
      <Tooltip title="Filters">
        <ToolbarButton
          ref={filterMenuTriggerRef}
          id="filter-menu-trigger"
          aria-controls="filter-menu"
          aria-haspopup="true"
          aria-expanded={filterMenuOpen ? 'true' : undefined}
          onClick={() => {
            setFilterMenuOpen(true);
          }}
        >
          <FilterListIcon fontSize="small" />
        </ToolbarButton>
      </Tooltip>
      <Menu
        id="filter-menu"
        anchorEl={filterMenuTriggerRef.current}
        open={filterMenuOpen}
        onClose={() => {
          setFilterMenuOpen(false);
        }}
        slotProps={{
          list: {
            'aria-labelledby': 'filter-menu-trigger',
          },
        }}
      >
        <MenuItem onClick={() => handleFilterSelect('all')}>Show All Data</MenuItem>
        <MenuItem onClick={() => handleFilterSelect('errors')}>Show Only Rows with Errors</MenuItem>
        <MenuItem onClick={() => handleFilterSelect('warnings')}>Show Only Rows with Warnings</MenuItem>
      </Menu>
    </Box>
  );
};

export default FilterMenu;
